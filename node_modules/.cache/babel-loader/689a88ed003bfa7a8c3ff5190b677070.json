{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _TouchableRipple = _interopRequireDefault(require(\"../TouchableRipple\"));\n\nvar _Text = _interopRequireDefault(require(\"../Typography/Text\"));\n\nvar _theming = require(\"../../core/theming\");\n\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/List/ListItem.tsx\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2.default)(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar ListItem = function (_React$Component) {\n  (0, _inherits2.default)(ListItem, _React$Component);\n\n  function ListItem() {\n    (0, _classCallCheck2.default)(this, ListItem);\n    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ListItem).apply(this, arguments));\n  }\n\n  (0, _createClass2.default)(ListItem, [{\n    key: \"renderDescription\",\n    value: function renderDescription(descriptionColor, description) {\n      var _this$props = this.props,\n          descriptionEllipsizeMode = _this$props.descriptionEllipsizeMode,\n          descriptionStyle = _this$props.descriptionStyle,\n          descriptionNumberOfLines = _this$props.descriptionNumberOfLines;\n      return typeof description === 'function' ? description({\n        ellipsizeMode: descriptionEllipsizeMode,\n        color: descriptionColor,\n        fontSize: styles.description.fontSize\n      }) : React.createElement(_Text.default, {\n        numberOfLines: descriptionNumberOfLines,\n        ellipsizeMode: descriptionEllipsizeMode,\n        style: [styles.description, {\n          color: descriptionColor\n        }, descriptionStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        }\n      }, description);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          left = _this$props2.left,\n          right = _this$props2.right,\n          title = _this$props2.title,\n          description = _this$props2.description,\n          onPress = _this$props2.onPress,\n          theme = _this$props2.theme,\n          style = _this$props2.style,\n          titleStyle = _this$props2.titleStyle,\n          titleNumberOfLines = _this$props2.titleNumberOfLines,\n          titleEllipsizeMode = _this$props2.titleEllipsizeMode,\n          rest = (0, _objectWithoutProperties2.default)(_this$props2, [\"left\", \"right\", \"title\", \"description\", \"onPress\", \"theme\", \"style\", \"titleStyle\", \"titleNumberOfLines\", \"titleEllipsizeMode\"]);\n      var titleColor = (0, _color.default)(theme.colors.text).alpha(0.87).rgb().string();\n      var descriptionColor = (0, _color.default)(theme.colors.text).alpha(0.54).rgb().string();\n      return React.createElement(_TouchableRipple.default, (0, _extends2.default)({}, rest, {\n        style: [styles.container, style],\n        onPress: onPress,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        }\n      }), React.createElement(_reactNative.View, {\n        style: styles.row,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        }\n      }, left ? left({\n        color: descriptionColor,\n        style: description ? styles.iconMarginLeft : _objectSpread({}, styles.iconMarginLeft, {}, styles.marginVerticalNone)\n      }) : null, React.createElement(_reactNative.View, {\n        style: [styles.item, styles.content],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        }\n      }, React.createElement(_Text.default, {\n        ellipsizeMode: titleEllipsizeMode,\n        numberOfLines: titleNumberOfLines,\n        style: [styles.title, {\n          color: titleColor\n        }, titleStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        }\n      }, title), description ? this.renderDescription(descriptionColor, description) : null), right ? right({\n        color: descriptionColor,\n        style: description ? styles.iconMarginRight : _objectSpread({}, styles.iconMarginRight, {}, styles.marginVerticalNone)\n      }) : null));\n    }\n  }]);\n  return ListItem;\n}(React.Component);\n\n(0, _defineProperty2.default)(ListItem, \"displayName\", 'List.Item');\n(0, _defineProperty2.default)(ListItem, \"defaultProps\", {\n  titleNumberOfLines: 1,\n  descriptionNumberOfLines: 2\n});\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    padding: 8\n  },\n  row: {\n    flexDirection: 'row'\n  },\n  title: {\n    fontSize: 16\n  },\n  description: {\n    fontSize: 14\n  },\n  marginVerticalNone: {\n    marginVertical: 0\n  },\n  iconMarginLeft: {\n    marginLeft: 0,\n    marginRight: 16\n  },\n  iconMarginRight: {\n    marginRight: 0\n  },\n  item: {\n    marginVertical: 6,\n    paddingLeft: 8\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center'\n  }\n});\n\nvar _default = (0, _theming.withTheme)(ListItem);\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}