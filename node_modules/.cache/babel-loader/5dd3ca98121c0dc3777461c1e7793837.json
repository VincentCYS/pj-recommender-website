{"ast":null,"code":"var AsyncStorage = require(\"react-native\").AsyncStorage;\n\nvar base64 = require('./base64');\n\nvar User = require('./user');\n\nvar API = function API() {}; // declare API endpoint\n\n\nvar EP = {\n  prod: \"https://708pnhz5z2.execute-api.ap-southeast-1.amazonaws.com/Prod\",\n  local: \"http://localhost:13500\"\n}[\"prod\"]; // set prototype\n\nAPI.prototype.get = function (path) {\n  var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var auth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  return new Promise(function (resolve, reject) {\n    // set headers\n    var headerParams = {\n      'Content-Type': 'application/json'\n    }; // get user id and token\n\n    new Promise(function (_resolve, _reject) {\n      // need auth?\n      if (auth) {\n        User.getUserIdAndToken().then(function (user) {\n          // append auth\n          if (auth) headerParams[\"Authorization\"] = 'Basic ' + base64.encode(\"\".concat(user.id, \":\").concat(user.token)); // next process\n\n          _resolve();\n        }).catch(_reject);\n      } else {\n        // by pass\n        _resolve();\n      }\n    }).then(function () {\n      var queryString = \"\";\n      if (Object.keys(query).length > 0) queryString = \"?\".concat(Object.keys(query).map(function (key) {\n        return \"\".concat(key, \"=\").concat(query[key]);\n      }).join(\"&\")); // login\n\n      fetch(\"\".concat(EP).concat(path).concat(queryString), {\n        method: 'GET',\n        headers: new Headers(headerParams)\n      }) // get respoonse\n      .then(function (response) {\n        return response.json();\n      }) // get res's json format\n      .then(resolve) // error ?\n      .catch(function (error) {\n        return reject({\n          code: 500,\n          messages: [error]\n        });\n      });\n    }) // error\n    .catch(reject);\n  });\n}; // set prototype\n\n\nAPI.prototype.update = function (path) {\n  var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var auth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  return new Promise(function (resolve, reject) {\n    // set headers\n    var headerParams = {\n      'Content-Type': 'application/json'\n    }; // get user id and token\n\n    new Promise(function (_resolve, _reject) {\n      // need auth?\n      if (auth) {\n        User.getUserIdAndToken().then(function (user) {\n          // append auth\n          if (auth) headerParams[\"Authorization\"] = 'Basic ' + base64.encode(\"\".concat(user.id, \":\").concat(user.token)); // next process\n\n          _resolve();\n        }).catch(_reject);\n      } else {\n        // by pass\n        _resolve();\n      }\n    }).then(function () {\n      // craete request\n      fetch(\"\".concat(EP).concat(path), {\n        method: 'PUT',\n        headers: new Headers(headerParams),\n        body: JSON.stringify(form)\n      }) // get respoonse\n      .then(function (response) {\n        return response.json();\n      }) // get res's json format\n      .then(resolve) // error ?\n      .catch(function (error) {\n        return reject({\n          code: 500,\n          messages: [error]\n        });\n      });\n    }) // error\n    .catch(reject);\n  });\n}; // set prototype\n\n\nAPI.prototype.create = function (path) {\n  var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var auth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  return new Promise(function (resolve, reject) {\n    // set headers\n    var headerParams = {\n      'Content-Type': 'application/json'\n    }; // get user id and token\n\n    new Promise(function (_resolve, _reject) {\n      // need auth?\n      if (auth) {\n        User.getUserIdAndToken().then(function (user) {\n          // append auth\n          if (auth) headerParams[\"Authorization\"] = 'Basic ' + base64.encode(\"\".concat(user.id, \":\").concat(user.token)); // next process\n\n          _resolve();\n        }).catch(_reject);\n      } else {\n        // by pass\n        _resolve();\n      }\n    }).then(function () {\n      // craete request\n      fetch(\"\".concat(EP).concat(path), {\n        method: 'POST',\n        headers: new Headers(headerParams),\n        body: JSON.stringify(form)\n      }) // get respoonse\n      .then(function (response) {\n        return response.json();\n      }) // get res's json format\n      .then(resolve) // error ?\n      .catch(function (error) {\n        return reject({\n          code: 500,\n          messages: [error]\n        });\n      });\n    }) // error\n    .catch(reject);\n  });\n}; // set prototype\n\n\nAPI.prototype.delete = function (path) {\n  var auth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return new Promise(function (resolve, reject) {\n    // set headers\n    var headerParams = {\n      'Content-Type': 'application/json'\n    }; // get user id and token\n\n    new Promise(function (_resolve, _reject) {\n      // need auth?\n      if (auth) {\n        User.getUserIdAndToken().then(function (user) {\n          // append auth\n          if (auth) headerParams[\"Authorization\"] = 'Basic ' + base64.encode(\"\".concat(user.id, \":\").concat(user.token)); // next process\n\n          _resolve();\n        }).catch(_reject);\n      } else {\n        // by pass\n        _resolve();\n      }\n    }).then(function () {\n      // craete request\n      fetch(\"\".concat(EP).concat(path), {\n        method: 'DELETE',\n        headers: new Headers(headerParams)\n      }) // get respoonse\n      .then(function (response) {\n        return response.json();\n      }) // get res's json format\n      .then(resolve) // error ?\n      .catch(function (error) {\n        return reject({\n          code: 500,\n          messages: [error]\n        });\n      });\n    }) // error\n    .catch(reject);\n  });\n};\n\nmodule.exports = new API();","map":{"version":3,"sources":["/Users/vincentchan/Documents/GitHub/online-shop/src/helpers/api.js"],"names":["AsyncStorage","require","base64","User","API","EP","prod","local","prototype","get","path","query","auth","Promise","resolve","reject","headerParams","_resolve","_reject","getUserIdAndToken","then","user","encode","id","token","catch","queryString","Object","keys","length","map","key","join","fetch","method","headers","Headers","response","json","error","code","messages","update","form","body","JSON","stringify","create","delete","module","exports"],"mappings":"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","sourcesContent":["const AsyncStorage = require(\"react-native\").AsyncStorage;\nconst base64 = require('./base64');\nconst User = require('./user');\n\nvar API = function() {}\n\n// declare API endpoint\nconst EP = {\n    prod : \"https://708pnhz5z2.execute-api.ap-southeast-1.amazonaws.com/Prod\",\n    local : \"http://localhost:13500\"\n}[\"prod\"];\n// set prototype\nAPI.prototype.get = function(path, query = {}, auth = false){\n    return new Promise((resolve, reject) => {\n        // set headers\n        var headerParams = {\n            'Content-Type'  : 'application/json'\n        };\n        // get user id and token\n        new Promise((_resolve, _reject) => {\n            // need auth?\n            if(auth){\n                User.getUserIdAndToken()\n                .then((user) => {                    \n                    // append auth\n                    if(auth) headerParams[\"Authorization\"] = 'Basic ' + base64.encode(`${user.id}:${user.token}`);\n                    // next process\n                    _resolve();\n                }).catch(_reject);\n            } else {\n                // by pass\n                _resolve();\n            }\n        })\n        .then(() => {\n            var queryString = \"\";\n            if(Object.keys(query).length > 0) queryString = `?${Object.keys(query).map(key => { return `${key}=${query[key]}`}).join(\"&\")}`;\n            // login\n            fetch(`${EP}${path}${queryString}`, { \n                method  : 'GET', \n                headers : new Headers(headerParams)\n            })\n            // get respoonse\n            .then((response) => response.json())\n            // get res's json format\n            .then(resolve)\n            // error ?\n            .catch(error => reject({\n                code     : 500,\n                messages : [error]\n            }));\n        })\n        // error\n        .catch(reject);\n    });\n};\n// set prototype\nAPI.prototype.update = function(path, form = {}, auth = false){\n    return new Promise((resolve, reject) => {\n        // set headers\n        var headerParams = {\n            'Content-Type'  : 'application/json'\n        };\n        // get user id and token\n        new Promise((_resolve, _reject) => {\n            // need auth?\n            if(auth){\n                User.getUserIdAndToken()\n                .then((user) => {\n                    // append auth\n                    if(auth) headerParams[\"Authorization\"] = 'Basic ' + base64.encode(`${user.id}:${user.token}`);\n                    // next process\n                    _resolve();\n                }).catch(_reject);\n            } else {\n                // by pass\n                _resolve();\n            }\n        })\n        .then(() => {\n            // craete request\n            fetch(`${EP}${path}`, { \n                method  : 'PUT', \n                headers : new Headers(headerParams),\n                body    : JSON.stringify(form)\n            })\n            // get respoonse\n            .then((response) => response.json())\n            // get res's json format\n            .then(resolve)\n            // error ?\n            .catch(error => reject({\n                code     : 500,\n                messages : [error]\n            }));\n        })\n        // error\n        .catch(reject);\n    });\n};\n// set prototype\nAPI.prototype.create = function(path, form = {}, auth = false){\n    return new Promise((resolve, reject) => {\n        // set headers\n        var headerParams = {\n            'Content-Type'  : 'application/json'\n        };\n        // get user id and token\n        new Promise((_resolve, _reject) => {\n            // need auth?\n            if(auth){\n                User.getUserIdAndToken()\n                .then((user) => {\n                    // append auth\n                    if(auth) headerParams[\"Authorization\"] = 'Basic ' + base64.encode(`${user.id}:${user.token}`);\n                    // next process\n                    _resolve();\n                }).catch(_reject);\n            } else {\n                // by pass\n                _resolve();\n            }\n        })\n        .then(() => {\n            // craete request\n            fetch(`${EP}${path}`, { \n                method  : 'POST', \n                headers : new Headers(headerParams),\n                body    : JSON.stringify(form)\n            })\n            // get respoonse\n            .then((response) => response.json())\n            // get res's json format\n            .then(resolve)\n            // error ?\n            .catch(error => reject({\n                code     : 500,\n                messages : [error]\n            }));\n        })\n        // error\n        .catch(reject);\n    });\n};\n// set prototype\nAPI.prototype.delete = function(path, auth = false){\n    return new Promise((resolve, reject) => {\n        // set headers\n        var headerParams = {\n            'Content-Type'  : 'application/json'\n        };\n        // get user id and token\n        new Promise((_resolve, _reject) => {\n            // need auth?\n            if(auth){\n                User.getUserIdAndToken()\n                .then((user) => {\n                    // append auth\n                    if(auth) headerParams[\"Authorization\"] = 'Basic ' + base64.encode(`${user.id}:${user.token}`);\n                    // next process\n                    _resolve();\n                }).catch(_reject);\n            } else {\n                // by pass\n                _resolve();\n            }\n        })\n        .then(() => {\n            // craete request\n            fetch(`${EP}${path}`, { \n                method  : 'DELETE', \n                headers : new Headers(headerParams)\n            })\n            // get respoonse\n            .then((response) => response.json())\n            // get res's json format\n            .then(resolve)\n            // error ?\n            .catch(error => reject({\n                code     : 500,\n                messages : [error]\n            }));\n        })\n        // error\n        .catch(reject);\n    });\n};\n\nmodule.exports = new API();"]},"metadata":{},"sourceType":"module"}