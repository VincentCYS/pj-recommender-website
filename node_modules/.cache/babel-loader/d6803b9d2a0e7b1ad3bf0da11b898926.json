{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _TouchableRipple = _interopRequireDefault(require(\"./TouchableRipple\"));\n\nvar _Icon = _interopRequireDefault(require(\"./Icon\"));\n\nvar _CrossFadeIcon = _interopRequireDefault(require(\"./CrossFadeIcon\"));\n\nvar _theming = require(\"../core/theming\");\n\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/IconButton.tsx\";\n\nvar IconButton = function IconButton(_ref) {\n  var icon = _ref.icon,\n      customColor = _ref.color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      accessibilityLabel = _ref.accessibilityLabel,\n      disabled = _ref.disabled,\n      onPress = _ref.onPress,\n      _ref$animated = _ref.animated,\n      animated = _ref$animated === void 0 ? false : _ref$animated,\n      theme = _ref.theme,\n      style = _ref.style,\n      rest = (0, _objectWithoutProperties2.default)(_ref, [\"icon\", \"color\", \"size\", \"accessibilityLabel\", \"disabled\", \"onPress\", \"animated\", \"theme\", \"style\"]);\n  var iconColor = typeof customColor !== 'undefined' ? customColor : theme.colors.text;\n  var rippleColor = (0, _color.default)(iconColor).alpha(0.32).rgb().string();\n  var IconComponent = animated ? _CrossFadeIcon.default : _Icon.default;\n  var buttonSize = size * 1.5;\n  return React.createElement(_TouchableRipple.default, (0, _extends2.default)({\n    borderless: true,\n    centered: true,\n    onPress: onPress,\n    rippleColor: rippleColor,\n    style: [styles.container, {\n      width: buttonSize,\n      height: buttonSize,\n      borderRadius: buttonSize / 2\n    }, disabled && styles.disabled, style],\n    accessibilityLabel: accessibilityLabel,\n    accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityStates: disabled ? ['disabled'] : [],\n    disabled: disabled,\n    hitSlop: _TouchableRipple.default.supported ? {\n      top: 10,\n      left: 10,\n      bottom: 10,\n      right: 10\n    } : {\n      top: 6,\n      left: 6,\n      bottom: 6,\n      right: 6\n    }\n  }, rest, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    }\n  }), React.createElement(_reactNative.View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    }\n  }, React.createElement(IconComponent, {\n    color: iconColor,\n    source: icon,\n    size: size,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    }\n  })));\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    overflow: 'hidden',\n    margin: 6\n  },\n  disabled: {\n    opacity: 0.32\n  }\n});\n\nvar _default = (0, _theming.withTheme)(IconButton);\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}