{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _theming = require(\"../../core/theming\");\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _IconButton = _interopRequireDefault(require(\"../IconButton\"));\n\nvar _ToggleButtonGroup = _interopRequireWildcard(require(\"./ToggleButtonGroup\"));\n\nvar _ToggleButtonRow = _interopRequireDefault(require(\"./ToggleButtonRow\"));\n\nvar _colors = require(\"../../styles/colors\");\n\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/ToggleButton/ToggleButton.tsx\";\n\nvar ToggleButton = function (_React$Component) {\n  (0, _inherits2.default)(ToggleButton, _React$Component);\n\n  function ToggleButton() {\n    (0, _classCallCheck2.default)(this, ToggleButton);\n    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ToggleButton).apply(this, arguments));\n  }\n\n  (0, _createClass2.default)(ToggleButton, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          icon = _this$props.icon,\n          size = _this$props.size,\n          theme = _this$props.theme,\n          accessibilityLabel = _this$props.accessibilityLabel,\n          disabled = _this$props.disabled,\n          style = _this$props.style,\n          value = _this$props.value,\n          status = _this$props.status,\n          _onPress = _this$props.onPress,\n          rest = (0, _objectWithoutProperties2.default)(_this$props, [\"icon\", \"size\", \"theme\", \"accessibilityLabel\", \"disabled\", \"style\", \"value\", \"status\", \"onPress\"]);\n      var borderRadius = theme.roundness;\n      return React.createElement(_ToggleButtonGroup.ToggleButtonGroupContext.Consumer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        }\n      }, function (context) {\n        var backgroundColor;\n        var checked = context && context.value === value || status === 'checked';\n\n        if (checked) {\n          backgroundColor = theme.dark ? 'rgba(255, 255, 255, .12)' : 'rgba(0, 0, 0, .08)';\n        } else {\n          backgroundColor = 'transparent';\n        }\n\n        return React.createElement(_IconButton.default, (0, _extends2.default)({\n          borderless: false,\n          icon: icon,\n          onPress: function onPress(e) {\n            if (_onPress) {\n              _onPress(e);\n            }\n\n            if (context) {\n              context.onValueChange(!checked ? value : null);\n            }\n          },\n          size: size,\n          accessibilityLabel: accessibilityLabel,\n          disabled: disabled,\n          style: [styles.content, {\n            backgroundColor: backgroundColor,\n            borderRadius: borderRadius,\n            borderColor: (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.29).rgb().string()\n          }, style]\n        }, rest, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137\n          }\n        }));\n      });\n    }\n  }]);\n  return ToggleButton;\n}(React.Component);\n\n(0, _defineProperty2.default)(ToggleButton, \"Group\", _ToggleButtonGroup.default);\n(0, _defineProperty2.default)(ToggleButton, \"Row\", _ToggleButtonRow.default);\n\nvar styles = _reactNative.StyleSheet.create({\n  content: {\n    width: 42,\n    height: 42,\n    margin: 0\n  }\n});\n\nvar _default = (0, _theming.withTheme)(ToggleButton);\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}