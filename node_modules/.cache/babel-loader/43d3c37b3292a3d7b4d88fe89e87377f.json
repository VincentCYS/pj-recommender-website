{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNativeSafeAreaView = _interopRequireDefault(require(\"react-native-safe-area-view\"));\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _overlay = _interopRequireDefault(require(\"../styles/overlay\"));\n\nvar _Icon = _interopRequireDefault(require(\"./Icon\"));\n\nvar _Surface = _interopRequireDefault(require(\"./Surface\"));\n\nvar _Badge = _interopRequireDefault(require(\"./Badge\"));\n\nvar _TouchableRipple = _interopRequireDefault(require(\"./TouchableRipple\"));\n\nvar _Text = _interopRequireDefault(require(\"./Typography/Text\"));\n\nvar _colors = require(\"../styles/colors\");\n\nvar _theming = require(\"../core/theming\");\n\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/BottomNavigation.tsx\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2.default)(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar MIN_RIPPLE_SCALE = 0.001;\nvar MIN_TAB_WIDTH = 96;\nvar MAX_TAB_WIDTH = 168;\nvar BAR_HEIGHT = 56;\nvar FAR_FAR_AWAY = 9999;\n\nvar Touchable = function Touchable(_ref) {\n  var _0 = _ref.route,\n      style = _ref.style,\n      children = _ref.children,\n      borderless = _ref.borderless,\n      centered = _ref.centered,\n      rippleColor = _ref.rippleColor,\n      rest = (0, _objectWithoutProperties2.default)(_ref, [\"route\", \"style\", \"children\", \"borderless\", \"centered\", \"rippleColor\"]);\n  return _TouchableRipple.default.supported ? React.createElement(_TouchableRipple.default, (0, _extends2.default)({}, rest, {\n    borderless: borderless,\n    centered: centered,\n    rippleColor: rippleColor,\n    style: style,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291\n    }\n  }), children) : React.createElement(_reactNative.TouchableWithoutFeedback, (0, _extends2.default)({}, rest, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301\n    }\n  }), React.createElement(_reactNative.View, {\n    style: style,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302\n    }\n  }, children));\n};\n\nvar SceneComponent = function (_React$PureComponent) {\n  (0, _inherits2.default)(SceneComponent, _React$PureComponent);\n\n  function SceneComponent() {\n    (0, _classCallCheck2.default)(this, SceneComponent);\n    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(SceneComponent).apply(this, arguments));\n  }\n\n  (0, _createClass2.default)(SceneComponent, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          component = _this$props.component,\n          rest = (0, _objectWithoutProperties2.default)(_this$props, [\"component\"]);\n      return React.createElement(component, rest);\n    }\n  }]);\n  return SceneComponent;\n}(React.PureComponent);\n\nvar BottomNavigation = function (_React$Component) {\n  (0, _inherits2.default)(BottomNavigation, _React$Component);\n  (0, _createClass2.default)(BottomNavigation, null, [{\n    key: \"SceneMap\",\n    value: function SceneMap(scenes) {\n      return function (_ref2) {\n        var route = _ref2.route,\n            jumpTo = _ref2.jumpTo;\n        return React.createElement(SceneComponent, {\n          key: route.key,\n          component: scenes[route.key ? route.key : ''],\n          route: route,\n          jumpTo: jumpTo,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 386\n          }\n        });\n      };\n    }\n  }, {\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var _nextProps$navigation = nextProps.navigationState,\n          index = _nextProps$navigation.index,\n          routes = _nextProps$navigation.routes;\n      var tabs = routes.map(function (_, i) {\n        return prevState.tabs[i] || new _reactNative.Animated.Value(i === index ? 1 : 0);\n      });\n      var offsets = routes.map(function (_, i) {\n        return prevState.offsets[i] || new _reactNative.Animated.Value(i === index ? 0 : 1);\n      });\n      var nextState = {\n        tabs: tabs,\n        offsets: offsets\n      };\n\n      if (index !== prevState.current) {\n        (0, _extends2.default)(nextState, {\n          current: index,\n          previous: prevState.current,\n          loaded: prevState.loaded.includes(index) ? prevState.loaded : [].concat((0, _toConsumableArray2.default)(prevState.loaded), [index])\n        });\n      }\n\n      return nextState;\n    }\n  }]);\n\n  function BottomNavigation(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, BottomNavigation);\n    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(BottomNavigation).call(this, props));\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleKeyboardShow\", function () {\n      var scale = _this.props.theme.animation.scale;\n\n      _this.setState({\n        keyboard: true\n      }, function () {\n        return _reactNative.Animated.timing(_this.state.visible, {\n          toValue: 0,\n          duration: 150 * scale,\n          useNativeDriver: true\n        }).start();\n      });\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleKeyboardHide\", function () {\n      var scale = _this.props.theme.animation.scale;\n\n      _reactNative.Animated.timing(_this.state.visible, {\n        toValue: 1,\n        duration: 100 * scale,\n        useNativeDriver: true\n      }).start(function () {\n        _this.setState({\n          keyboard: false\n        });\n      });\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"animateToCurrentIndex\", function () {\n      var shifting = _this.isShifting();\n\n      var _this$props2 = _this.props,\n          navigationState = _this$props2.navigationState,\n          scale = _this$props2.theme.animation.scale;\n      var routes = navigationState.routes,\n          index = navigationState.index;\n\n      _this.state.ripple.setValue(MIN_RIPPLE_SCALE);\n\n      _reactNative.Animated.parallel([_reactNative.Animated.timing(_this.state.ripple, {\n        toValue: 1,\n        duration: shifting ? 400 * scale : 0,\n        useNativeDriver: true\n      })].concat((0, _toConsumableArray2.default)(routes.map(function (_, i) {\n        return _reactNative.Animated.timing(_this.state.tabs[i], {\n          toValue: i === index ? 1 : 0,\n          duration: shifting ? 150 * scale : 0,\n          useNativeDriver: true\n        });\n      })))).start(function (_ref3) {\n        var finished = _ref3.finished;\n\n        _this.state.tabs.map(function (tab, i) {\n          return tab.setValue(i === index ? 1 : 0);\n        });\n\n        _this.state.index.setValue(index);\n\n        _this.state.ripple.setValue(MIN_RIPPLE_SCALE);\n\n        if (finished) {\n          _this.state.offsets.forEach(function (offset, i) {\n            if (i === index) {\n              offset.setValue(0);\n            } else {\n              offset.setValue(1);\n            }\n          });\n        }\n      });\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleLayout\", function (e) {\n      var layout = _this.state.layout;\n      var _e$nativeEvent$layout = e.nativeEvent.layout,\n          height = _e$nativeEvent$layout.height,\n          width = _e$nativeEvent$layout.width;\n\n      if (height === layout.height && width === layout.width) {\n        return;\n      }\n\n      _this.setState({\n        layout: {\n          height: height,\n          width: width,\n          measured: true\n        }\n      });\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handleTabPress\", function (index) {\n      var _this$props3 = _this.props,\n          navigationState = _this$props3.navigationState,\n          onTabPress = _this$props3.onTabPress,\n          onIndexChange = _this$props3.onIndexChange;\n      var event = {\n        route: navigationState.routes[index],\n        defaultPrevented: false,\n        preventDefault: function preventDefault() {\n          event.defaultPrevented = true;\n        }\n      };\n      onTabPress === null || onTabPress === void 0 ? void 0 : onTabPress(event);\n\n      if (event.defaultPrevented) {\n        return;\n      }\n\n      if (index !== navigationState.index) {\n        onIndexChange(index);\n      }\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"jumpTo\", function (key) {\n      var index = _this.props.navigationState.routes.findIndex(function (route) {\n        return route.key === key;\n      });\n\n      _this.props.onIndexChange(index);\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"isShifting\", function () {\n      return typeof _this.props.shifting === 'boolean' ? _this.props.shifting : _this.props.navigationState.routes.length > 3;\n    });\n    var _index = _this.props.navigationState.index;\n    _this.state = {\n      visible: new _reactNative.Animated.Value(1),\n      tabs: [],\n      offsets: [],\n      index: new _reactNative.Animated.Value(_index),\n      ripple: new _reactNative.Animated.Value(MIN_RIPPLE_SCALE),\n      touch: new _reactNative.Animated.Value(MIN_RIPPLE_SCALE),\n      layout: {\n        height: 0,\n        width: 0,\n        measured: false\n      },\n      current: _index,\n      previous: 0,\n      loaded: [_index],\n      keyboard: false\n    };\n    return _this;\n  }\n\n  (0, _createClass2.default)(BottomNavigation, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.animateToCurrentIndex();\n\n      if (_reactNative.Platform.OS === 'ios') {\n        _reactNative.Keyboard.addListener('keyboardWillShow', this.handleKeyboardShow);\n\n        _reactNative.Keyboard.addListener('keyboardWillHide', this.handleKeyboardHide);\n      } else {\n        _reactNative.Keyboard.addListener('keyboardDidShow', this.handleKeyboardShow);\n\n        _reactNative.Keyboard.addListener('keyboardDidHide', this.handleKeyboardHide);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this2 = this;\n\n      if (prevProps.navigationState.index === this.props.navigationState.index) {\n        return;\n      }\n\n      this.state.offsets.forEach(function (offset, i) {\n        if (i === _this2.props.navigationState.index || i === prevProps.navigationState.index) {\n          offset.setValue(0);\n        }\n      });\n      this.animateToCurrentIndex();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (_reactNative.Platform.OS === 'ios') {\n        _reactNative.Keyboard.removeListener('keyboardWillShow', this.handleKeyboardShow);\n\n        _reactNative.Keyboard.removeListener('keyboardWillHide', this.handleKeyboardHide);\n      } else {\n        _reactNative.Keyboard.removeListener('keyboardDidShow', this.handleKeyboardShow);\n\n        _reactNative.Keyboard.removeListener('keyboardDidHide', this.handleKeyboardHide);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$props4 = this.props,\n          navigationState = _this$props4.navigationState,\n          renderScene = _this$props4.renderScene,\n          renderIcon = _this$props4.renderIcon,\n          renderLabel = _this$props4.renderLabel,\n          _this$props4$renderTo = _this$props4.renderTouchable,\n          renderTouchable = _this$props4$renderTo === void 0 ? function (props) {\n        return React.createElement(Touchable, (0, _extends2.default)({}, props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 627\n          }\n        }));\n      } : _this$props4$renderTo,\n          _this$props4$getLabel = _this$props4.getLabelText,\n          getLabelText = _this$props4$getLabel === void 0 ? function (_ref4) {\n        var route = _ref4.route;\n        return route.title;\n      } : _this$props4$getLabel,\n          _this$props4$getBadge = _this$props4.getBadge,\n          getBadge = _this$props4$getBadge === void 0 ? function (_ref5) {\n        var route = _ref5.route;\n        return route.badge;\n      } : _this$props4$getBadge,\n          _this$props4$getColor = _this$props4.getColor,\n          getColor = _this$props4$getColor === void 0 ? function (_ref6) {\n        var route = _ref6.route;\n        return route.color;\n      } : _this$props4$getColor,\n          _this$props4$getAcces = _this$props4.getAccessibilityLabel,\n          getAccessibilityLabel = _this$props4$getAcces === void 0 ? function (_ref7) {\n        var route = _ref7.route;\n        return route.accessibilityLabel;\n      } : _this$props4$getAcces,\n          _this$props4$getTestI = _this$props4.getTestID,\n          getTestID = _this$props4$getTestI === void 0 ? function (_ref8) {\n        var route = _ref8.route;\n        return route.testID;\n      } : _this$props4$getTestI,\n          activeColor = _this$props4.activeColor,\n          inactiveColor = _this$props4.inactiveColor,\n          keyboardHidesNavigationBar = _this$props4.keyboardHidesNavigationBar,\n          barStyle = _this$props4.barStyle,\n          labeled = _this$props4.labeled,\n          style = _this$props4.style,\n          theme = _this$props4.theme,\n          sceneAnimationEnabled = _this$props4.sceneAnimationEnabled;\n      var _this$state = this.state,\n          layout = _this$state.layout,\n          loaded = _this$state.loaded,\n          index = _this$state.index,\n          visible = _this$state.visible,\n          ripple = _this$state.ripple,\n          keyboard = _this$state.keyboard,\n          tabs = _this$state.tabs,\n          offsets = _this$state.offsets;\n      var routes = navigationState.routes;\n      var colors = theme.colors,\n          isDarkTheme = theme.dark,\n          mode = theme.mode;\n      var shifting = this.isShifting();\n\n      var _ref9 = _reactNative.StyleSheet.flatten(barStyle) || {},\n          customBackground = _ref9.backgroundColor,\n          _ref9$elevation = _ref9.elevation,\n          elevation = _ref9$elevation === void 0 ? 4 : _ref9$elevation;\n\n      var approxBackgroundColor = customBackground ? customBackground : isDarkTheme && mode === 'adaptive' ? (0, _overlay.default)(elevation, colors.surface) : colors.primary;\n      var backgroundColor = shifting ? index.interpolate({\n        inputRange: routes.map(function (_, i) {\n          return i;\n        }),\n        outputRange: routes.map(function (route) {\n          return getColor({\n            route: route\n          }) || approxBackgroundColor;\n        })\n      }) : approxBackgroundColor;\n      var isDark = !(0, _color.default)(approxBackgroundColor).isLight();\n      var textColor = isDark ? _colors.white : _colors.black;\n      var activeTintColor = typeof activeColor !== 'undefined' ? activeColor : textColor;\n      var inactiveTintColor = typeof inactiveColor !== 'undefined' ? inactiveColor : (0, _color.default)(textColor).alpha(0.5).rgb().string();\n      var touchColor = (0, _color.default)(activeColor || activeTintColor).alpha(0.12).rgb().string();\n      var maxTabWidth = routes.length > 3 ? MIN_TAB_WIDTH : MAX_TAB_WIDTH;\n      var maxTabBarWidth = maxTabWidth * routes.length;\n      var tabBarWidth = Math.min(layout.width, maxTabBarWidth);\n      var tabWidth = tabBarWidth / routes.length;\n      var rippleSize = layout.width / 4;\n      return React.createElement(_reactNative.View, {\n        style: [styles.container, style],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 705\n        }\n      }, React.createElement(_reactNative.View, {\n        style: [styles.content, {\n          backgroundColor: colors.background\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 706\n        }\n      }, routes.map(function (route, index) {\n        if (!loaded.includes(index)) {\n          return null;\n        }\n\n        var focused = navigationState.index === index;\n        var opacity = sceneAnimationEnabled !== false ? tabs[index] : focused ? 1 : 0;\n        var top = offsets[index].interpolate({\n          inputRange: [0, 1],\n          outputRange: [0, FAR_FAR_AWAY]\n        });\n        return React.createElement(_reactNative.Animated.View, {\n          key: route.key,\n          pointerEvents: focused ? 'auto' : 'none',\n          accessibilityElementsHidden: !focused,\n          importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',\n          style: [_reactNative.StyleSheet.absoluteFill, {\n            opacity: opacity\n          }],\n          collapsable: false,\n          removeClippedSubviews: _reactNative.Platform.OS === 'ios' ? navigationState.index !== index : true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 723\n          }\n        }, React.createElement(_reactNative.Animated.View, {\n          style: [styles.content, {\n            top: top\n          }],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 738\n          }\n        }, renderScene({\n          route: route,\n          jumpTo: _this3.jumpTo\n        })));\n      })), React.createElement(_Surface.default, {\n        style: [styles.bar, keyboardHidesNavigationBar ? {\n          transform: [{\n            translateY: visible.interpolate({\n              inputRange: [0, 1],\n              outputRange: [layout.height, 0]\n            })\n          }],\n          position: keyboard ? 'absolute' : null\n        } : null, barStyle],\n        pointerEvents: layout.measured ? keyboardHidesNavigationBar && keyboard ? 'none' : 'auto' : 'none',\n        onLayout: this.handleLayout,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 748\n        }\n      }, React.createElement(_reactNative.Animated.View, {\n        style: [styles.barContent, {\n          backgroundColor: backgroundColor\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 780\n        }\n      }, React.createElement(_reactNativeSafeAreaView.default, {\n        forceInset: {\n          top: 'never',\n          bottom: 'always'\n        },\n        style: [styles.items, {\n          maxWidth: maxTabBarWidth\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 781\n        }\n      }, shifting ? React.createElement(_reactNative.Animated.View, {\n        pointerEvents: \"none\",\n        style: [styles.ripple, {\n          top: (BAR_HEIGHT - rippleSize) / 2,\n          left: tabWidth * (navigationState.index + 0.5) - rippleSize / 2,\n          height: rippleSize,\n          width: rippleSize,\n          borderRadius: rippleSize / 2,\n          backgroundColor: getColor({\n            route: routes[navigationState.index]\n          }),\n          transform: [{\n            scale: ripple.interpolate({\n              inputRange: [0, 1],\n              outputRange: [0, 8]\n            })\n          }],\n          opacity: ripple.interpolate({\n            inputRange: [0, MIN_RIPPLE_SCALE, 0.3, 1],\n            outputRange: [0, 0, 1, 1]\n          })\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 786\n        }\n      }) : null, routes.map(function (route, index) {\n        var focused = navigationState.index === index;\n        var active = tabs[index];\n        var scale = labeled && shifting ? active.interpolate({\n          inputRange: [0, 1],\n          outputRange: [0.5, 1]\n        }) : 1;\n        var translateY = labeled ? shifting ? active.interpolate({\n          inputRange: [0, 1],\n          outputRange: [7, 0]\n        }) : 0 : 7;\n        var activeOpacity = active;\n        var inactiveOpacity = active.interpolate({\n          inputRange: [0, 1],\n          outputRange: [1, 0]\n        });\n        var badge = getBadge({\n          route: route\n        });\n        return renderTouchable({\n          key: route.key,\n          route: route,\n          borderless: true,\n          centered: true,\n          rippleColor: touchColor,\n          onPress: function onPress() {\n            return _this3.handleTabPress(index);\n          },\n          testID: getTestID({\n            route: route\n          }),\n          accessibilityLabel: getAccessibilityLabel({\n            route: route\n          }),\n          accessibilityTraits: focused ? ['button', 'selected'] : 'button',\n          accessibilityComponentType: 'button',\n          accessibilityRole: 'button',\n          accessibilityStates: ['selected'],\n          style: styles.item,\n          children: React.createElement(_reactNative.View, {\n            pointerEvents: \"none\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 871\n            }\n          }, React.createElement(_reactNative.Animated.View, {\n            style: [styles.iconContainer, {\n              transform: [{\n                translateY: translateY\n              }]\n            }],\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 872\n            }\n          }, React.createElement(_reactNative.Animated.View, {\n            style: [styles.iconWrapper, {\n              opacity: activeOpacity\n            }],\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 878\n            }\n          }, renderIcon ? renderIcon({\n            route: route,\n            focused: true,\n            color: activeTintColor\n          }) : React.createElement(_Icon.default, {\n            source: route.icon,\n            color: activeTintColor,\n            size: 24,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 891\n            }\n          })), React.createElement(_reactNative.Animated.View, {\n            style: [styles.iconWrapper, {\n              opacity: inactiveOpacity\n            }],\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 898\n            }\n          }, renderIcon ? renderIcon({\n            route: route,\n            focused: false,\n            color: inactiveTintColor\n          }) : React.createElement(_Icon.default, {\n            source: route.icon,\n            color: inactiveTintColor,\n            size: 24,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 911\n            }\n          })), React.createElement(_reactNative.View, {\n            style: [styles.badgeContainer, {\n              right: (badge != null && typeof badge !== 'boolean' ? String(badge).length * -2 : 0) - 2\n            }],\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 918\n            }\n          }, typeof badge === 'boolean' ? React.createElement(_Badge.default, {\n            visible: badge,\n            size: 8,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 930\n            }\n          }) : React.createElement(_Badge.default, {\n            visible: badge != null,\n            size: 16,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 932\n            }\n          }, badge))), labeled ? React.createElement(_reactNative.Animated.View, {\n            style: [styles.labelContainer, {\n              transform: [{\n                scale: scale\n              }]\n            }],\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 939\n            }\n          }, React.createElement(_reactNative.Animated.View, {\n            style: [styles.labelWrapper, {\n              opacity: activeOpacity\n            }],\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 945\n            }\n          }, renderLabel ? renderLabel({\n            route: route,\n            focused: true,\n            color: activeTintColor\n          }) : React.createElement(_Text.default, {\n            style: [styles.label, {\n              color: activeTintColor\n            }],\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 958\n            }\n          }, getLabelText({\n            route: route\n          }))), shifting ? null : React.createElement(_reactNative.Animated.View, {\n            style: [styles.labelWrapper, {\n              opacity: inactiveOpacity\n            }],\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 969\n            }\n          }, renderLabel ? renderLabel({\n            route: route,\n            focused: false,\n            color: inactiveTintColor\n          }) : React.createElement(_Text.default, {\n            style: [styles.label, {\n              color: inactiveTintColor\n            }],\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 982\n            }\n          }, getLabelText({\n            route: route\n          })))) : React.createElement(_reactNative.View, {\n            style: styles.labelContainer,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 995\n            }\n          }))\n        });\n      })))));\n    }\n  }]);\n  return BottomNavigation;\n}(React.Component);\n\n(0, _defineProperty2.default)(BottomNavigation, \"defaultProps\", {\n  labeled: true,\n  keyboardHidesNavigationBar: true\n});\n\nvar _default = (0, _theming.withTheme)(BottomNavigation);\n\nexports.default = _default;\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  content: {\n    flex: 1\n  },\n  bar: {\n    left: 0,\n    right: 0,\n    bottom: 0,\n    elevation: 4\n  },\n  barContent: {\n    alignItems: 'center',\n    overflow: 'hidden'\n  },\n  items: {\n    flexDirection: 'row',\n    width: '100%'\n  },\n  item: {\n    flex: 1,\n    paddingVertical: 6\n  },\n  ripple: {\n    position: 'absolute'\n  },\n  iconContainer: {\n    height: 24,\n    width: 24,\n    marginTop: 2,\n    marginHorizontal: 12,\n    alignSelf: 'center'\n  },\n  iconWrapper: _objectSpread({}, _reactNative.StyleSheet.absoluteFillObject, {\n    alignItems: 'center'\n  }),\n  labelContainer: {\n    height: 16,\n    paddingBottom: 2\n  },\n  labelWrapper: _objectSpread({}, _reactNative.StyleSheet.absoluteFillObject),\n  label: _objectSpread({\n    fontSize: 12,\n    textAlign: 'center',\n    backgroundColor: 'transparent'\n  }, _reactNative.Platform.OS === 'web' ? {\n    whiteSpace: 'nowrap'\n  } : null),\n  badgeContainer: {\n    position: 'absolute',\n    left: 0,\n    top: -2\n  }\n});","map":null,"metadata":{},"sourceType":"script"}