{"ast":null,"code":"var base64 = require('./base64');\n\nvar API = function API() {}; // declare API endpoint\n\n\nvar EP = {\n  prod: \"https://708pnhz5z2.execute-api.ap-southeast-1.amazonaws.com/Prod\",\n  local: \"http://localhost:13500\"\n}[\"prod\"]; // set prototype\n\nAPI.prototype.get = function (path) {\n  var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var auth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  return new Promise(function (resolve, reject) {\n    // set headers\n    var headerParams = {\n      'Content-Type': 'application/json'\n    }; // get user id and token\n\n    new Promise(function (_resolve, _reject) {\n      var queryString = \"\";\n      if (Object.keys(query).length > 0) queryString = \"?\".concat(Object.keys(query).map(function (key) {\n        return \"\".concat(key, \"=\").concat(query[key]);\n      }).join(\"&\")); // login\n\n      fetch(\"\".concat(EP).concat(path).concat(queryString), {\n        method: 'GET',\n        headers: new Headers(headerParams)\n      }) // get respoonse\n      .then(function (response) {\n        return response.json();\n      }) // get res's json format\n      .then(resolve) // error ?\n      .catch(function (error) {\n        return reject({\n          code: 500,\n          messages: [error]\n        });\n      });\n    }) // error\n    .catch(reject);\n  });\n}; // set prototype\n\n\nAPI.prototype.update = function (path) {\n  var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var auth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  return new Promise(function (resolve, reject) {\n    // set headers\n    var headerParams = {\n      'Content-Type': 'application/json'\n    }; // get user id and token\n\n    new Promise(function (_resolve, _reject) {\n      // craete request\n      fetch(\"\".concat(EP).concat(path), {\n        method: 'PUT',\n        headers: new Headers(headerParams),\n        body: JSON.stringify(form)\n      }) // get respoonse\n      .then(function (response) {\n        return response.json();\n      }) // get res's json format\n      .then(resolve) // error ?\n      .catch(function (error) {\n        return reject({\n          code: 500,\n          messages: [error]\n        });\n      });\n    }) // error\n    .catch(reject);\n  });\n}; // set prototype\n\n\nAPI.prototype.create = function (path) {\n  var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var auth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  return new Promise(function (resolve, reject) {\n    // set headers\n    var headerParams = {\n      'Content-Type': 'application/json'\n    }; // get user id and token\n\n    new Promise(function (_resolve, _reject) {\n      // craete request\n      fetch(\"\".concat(EP).concat(path), {\n        method: 'POST',\n        headers: new Headers(headerParams),\n        body: JSON.stringify(form)\n      }) // get respoonse\n      .then(function (response) {\n        return response.json();\n      }) // get res's json format\n      .then(resolve) // error ?\n      .catch(function (error) {\n        return reject({\n          code: 500,\n          messages: [error]\n        });\n      });\n    }) // error\n    .catch(reject);\n  });\n}; // set prototype\n\n\nAPI.prototype.delete = function (path) {\n  var auth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return new Promise(function (resolve, reject) {\n    // set headers\n    var headerParams = {\n      'Content-Type': 'application/json'\n    }; // get user id and token\n\n    new Promise(function (_resolve, _reject) {\n      // craete request\n      fetch(\"\".concat(EP).concat(path), {\n        method: 'DELETE',\n        headers: new Headers(headerParams)\n      }) // get respoonse\n      .then(function (response) {\n        return response.json();\n      }) // get res's json format\n      .then(resolve) // error ?\n      .catch(function (error) {\n        return reject({\n          code: 500,\n          messages: [error]\n        });\n      });\n    }) // error\n    .catch(reject);\n  });\n};\n\nmodule.exports = new API();","map":{"version":3,"sources":["/Users/vincentchan/Documents/GitHub/online-shop/src/helpers/api.js"],"names":["base64","require","API","EP","prod","local","prototype","get","path","query","auth","Promise","resolve","reject","headerParams","_resolve","_reject","queryString","Object","keys","length","map","key","join","fetch","method","headers","Headers","then","response","json","catch","error","code","messages","update","form","body","JSON","stringify","create","delete","module","exports"],"mappings":"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","sourcesContent":["const base64 = require('./base64');\n\nvar API = function() {}\n\n// declare API endpoint\nconst EP = {\n    prod : \"https://708pnhz5z2.execute-api.ap-southeast-1.amazonaws.com/Prod\",\n    local : \"http://localhost:13500\"\n}[\"prod\"];\n// set prototype\nAPI.prototype.get = function(path, query = {}, auth = false){\n    return new Promise((resolve, reject) => {\n        // set headers\n        var headerParams = {\n            'Content-Type'  : 'application/json'\n        };\n        // get user id and token\n        new Promise((_resolve, _reject) => {\n            var queryString = \"\";\n            if(Object.keys(query).length > 0) queryString = `?${Object.keys(query).map(key => { return `${key}=${query[key]}`}).join(\"&\")}`;\n            // login\n            fetch(`${EP}${path}${queryString}`, { \n                method  : 'GET', \n                headers : new Headers(headerParams)\n            })\n            // get respoonse\n            .then((response) => response.json())\n            // get res's json format\n            .then(resolve)\n            // error ?\n            .catch(error => reject({\n                code     : 500,\n                messages : [error]\n            }));\n        })\n        // error\n        .catch(reject);\n    });\n};\n// set prototype\nAPI.prototype.update = function(path, form = {}, auth = false){\n    return new Promise((resolve, reject) => {\n        // set headers\n        var headerParams = {\n            'Content-Type'  : 'application/json'\n        };\n        // get user id and token\n        new Promise((_resolve, _reject) => {\n            // craete request\n            fetch(`${EP}${path}`, { \n                method  : 'PUT', \n                headers : new Headers(headerParams),\n                body    : JSON.stringify(form)\n            })\n            // get respoonse\n            .then((response) => response.json())\n            // get res's json format\n            .then(resolve)\n            // error ?\n            .catch(error => reject({\n                code     : 500,\n                messages : [error]\n            }));\n        })\n        // error\n        .catch(reject);\n    });\n};\n// set prototype\nAPI.prototype.create = function(path, form = {}, auth = false){\n    return new Promise((resolve, reject) => {\n        // set headers\n        var headerParams = {\n            'Content-Type'  : 'application/json'\n        };\n        // get user id and token\n        new Promise((_resolve, _reject) => {\n            // craete request\n            fetch(`${EP}${path}`, { \n                method  : 'POST', \n                headers : new Headers(headerParams),\n                body    : JSON.stringify(form)\n            })\n            // get respoonse\n            .then((response) => response.json())\n            // get res's json format\n            .then(resolve)\n            // error ?\n            .catch(error => reject({\n                code     : 500,\n                messages : [error]\n            }));\n        })\n        // error\n        .catch(reject);\n    });\n};\n// set prototype\nAPI.prototype.delete = function(path, auth = false){\n    return new Promise((resolve, reject) => {\n        // set headers\n        var headerParams = {\n            'Content-Type'  : 'application/json'\n        };\n        // get user id and token\n        new Promise((_resolve, _reject) => {\n            // craete request\n            fetch(`${EP}${path}`, { \n                method  : 'DELETE', \n                headers : new Headers(headerParams)\n            })\n            // get respoonse\n            .then((response) => response.json())\n            // get res's json format\n            .then(resolve)\n            // error ?\n            .catch(error => reject({\n                code     : 500,\n                messages : [error]\n            }));\n        })\n        // error\n        .catch(reject);\n    });\n};\n\nmodule.exports = new API();"]},"metadata":{},"sourceType":"module"}