{"ast":null,"code":"import _objectSpread from \"/Users/vincentchan/Documents/GitHub/online-shop/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/Users/vincentchan/Documents/GitHub/online-shop/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as CONSTANTS from \"./Constants\"; // If multiple components need access to some data, in that case we store such data in redux.\n\nvar initialState = {\n  cartItems: [],\n  showCartDialog: false,\n  showMenu: true,\n  checkedOutItems: [],\n  loggedInUser: null\n};\n\nvar rootReducer = function rootReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case CONSTANTS.ADD_ITEM_IN_CART:\n      {\n        var index = state.cartItems.findIndex(function (x) {\n          return x.id === action.payload.id;\n        }); // Is the item user wants to add already in the cart?\n\n        if (index !== -1) {\n          // Yes, update the quantity.\n          var cloneCartItems = _toConsumableArray(state.cartItems);\n\n          cloneCartItems[index] = _objectSpread({}, cloneCartItems[index], {\n            quantity: state.cartItems[index].quantity + action.payload.quantity\n          });\n          return _objectSpread({}, state, {\n            cartItems: cloneCartItems\n          });\n        } // No, add a new item.\n\n\n        return _objectSpread({}, state, {\n          cartItems: state.cartItems.concat(action.payload)\n        });\n      }\n\n    case CONSTANTS.SHOW_CART_DLG:\n      return _objectSpread({}, state, {\n        showCartDialog: action.payload\n      });\n\n    case CONSTANTS.DELETE_CART_ITEM:\n      return _objectSpread({}, state, {\n        cartItems: state.cartItems.filter(function (x) {\n          return x.id !== action.payload;\n        })\n      });\n\n    case CONSTANTS.TOGGLE_MENU:\n      return _objectSpread({}, state, {\n        showMenu: !state.showMenu\n      });\n\n    case CONSTANTS.SET_LOGGED_IN_USER:\n      return _objectSpread({}, state, {\n        loggedInUser: action.payload\n      });\n\n    case CONSTANTS.LOGOUT:\n      return _objectSpread({}, state, {\n        loggedInUser: null,\n        checkedOutItems: []\n      });\n\n    case CONSTANTS.SET_CHECKEDOUT_ITEMS:\n      return _objectSpread({}, state, {\n        checkedOutItems: action.payload\n      });\n\n    case CONSTANTS.UPDATE_CART_ITEM_QUANTITY:\n      {\n        var _index = state.cartItems.findIndex(function (x) {\n          return x.id === action.payload.id;\n        }); // User wants to update quantity of existing item.\n\n\n        if (_index !== -1) {\n          var _cloneCartItems = _toConsumableArray(state.cartItems);\n\n          _cloneCartItems[_index] = _objectSpread({}, _cloneCartItems[_index], {\n            quantity: action.payload.quantity\n          });\n          return _objectSpread({}, state, {\n            cartItems: _cloneCartItems\n          });\n        } // If we couldn't find such item, do nothing.\n\n\n        return state;\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["/Users/vincentchan/Documents/GitHub/online-shop/src/Redux/Reducer.js"],"names":["CONSTANTS","initialState","cartItems","showCartDialog","showMenu","checkedOutItems","loggedInUser","rootReducer","state","action","type","ADD_ITEM_IN_CART","index","findIndex","x","id","payload","cloneCartItems","quantity","concat","SHOW_CART_DLG","DELETE_CART_ITEM","filter","TOGGLE_MENU","SET_LOGGED_IN_USER","LOGOUT","SET_CHECKEDOUT_ITEMS","UPDATE_CART_ITEM_QUANTITY"],"mappings":";;AAAA,OAAO,KAAKA,SAAZ,MAA2B,aAA3B,C,CAEA;;AACA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE,EADQ;AAEnBC,EAAAA,cAAc,EAAE,KAFG;AAGnBC,EAAAA,QAAQ,EAAE,IAHS;AAInBC,EAAAA,eAAe,EAAE,EAJE;AAKnBC,EAAAA,YAAY,EAAE;AALK,CAArB;;AAQA,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBP,YAAyB;AAAA,MAAXQ,MAAW;;AACpD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKV,SAAS,CAACW,gBAAf;AAAiC;AAC/B,YAAIC,KAAK,GAAGJ,KAAK,CAACN,SAAN,CAAgBW,SAAhB,CAA0B,UAAAC,CAAC;AAAA,iBAAIA,CAAC,CAACC,EAAF,KAASN,MAAM,CAACO,OAAP,CAAeD,EAA5B;AAAA,SAA3B,CAAZ,CAD+B,CAG/B;;AACA,YAAIH,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChB;AACA,cAAIK,cAAc,sBAAOT,KAAK,CAACN,SAAb,CAAlB;;AACAe,UAAAA,cAAc,CAACL,KAAD,CAAd,qBACKK,cAAc,CAACL,KAAD,CADnB;AAEEM,YAAAA,QAAQ,EAAEV,KAAK,CAACN,SAAN,CAAgBU,KAAhB,EAAuBM,QAAvB,GAAkCT,MAAM,CAACO,OAAP,CAAeE;AAF7D;AAKA,mCAAYV,KAAZ;AAAmBN,YAAAA,SAAS,EAAEe;AAA9B;AACD,SAb8B,CAe/B;;;AACA,iCAAYT,KAAZ;AAAmBN,UAAAA,SAAS,EAAEM,KAAK,CAACN,SAAN,CAAgBiB,MAAhB,CAAuBV,MAAM,CAACO,OAA9B;AAA9B;AACD;;AACD,SAAKhB,SAAS,CAACoB,aAAf;AACE,+BAAYZ,KAAZ;AAAmBL,QAAAA,cAAc,EAAEM,MAAM,CAACO;AAA1C;;AACF,SAAKhB,SAAS,CAACqB,gBAAf;AACE,+BACKb,KADL;AAEEN,QAAAA,SAAS,EAAEM,KAAK,CAACN,SAAN,CAAgBoB,MAAhB,CAAuB,UAAAR,CAAC;AAAA,iBAAIA,CAAC,CAACC,EAAF,KAASN,MAAM,CAACO,OAApB;AAAA,SAAxB;AAFb;;AAIF,SAAKhB,SAAS,CAACuB,WAAf;AACE,+BAAYf,KAAZ;AAAmBJ,QAAAA,QAAQ,EAAE,CAACI,KAAK,CAACJ;AAApC;;AACF,SAAKJ,SAAS,CAACwB,kBAAf;AACE,+BAAYhB,KAAZ;AAAmBF,QAAAA,YAAY,EAAEG,MAAM,CAACO;AAAxC;;AACF,SAAKhB,SAAS,CAACyB,MAAf;AACE,+BAAYjB,KAAZ;AAAmBF,QAAAA,YAAY,EAAE,IAAjC;AAAuCD,QAAAA,eAAe,EAAE;AAAxD;;AACF,SAAKL,SAAS,CAAC0B,oBAAf;AACE,+BAAYlB,KAAZ;AAAmBH,QAAAA,eAAe,EAAEI,MAAM,CAACO;AAA3C;;AACF,SAAKhB,SAAS,CAAC2B,yBAAf;AAA0C;AACxC,YAAIf,MAAK,GAAGJ,KAAK,CAACN,SAAN,CAAgBW,SAAhB,CAA0B,UAAAC,CAAC;AAAA,iBAAIA,CAAC,CAACC,EAAF,KAASN,MAAM,CAACO,OAAP,CAAeD,EAA5B;AAAA,SAA3B,CAAZ,CADwC,CAGxC;;;AACA,YAAIH,MAAK,KAAK,CAAC,CAAf,EAAkB;AAChB,cAAIK,eAAc,sBAAOT,KAAK,CAACN,SAAb,CAAlB;;AACAe,UAAAA,eAAc,CAACL,MAAD,CAAd,qBACKK,eAAc,CAACL,MAAD,CADnB;AAEEM,YAAAA,QAAQ,EAAET,MAAM,CAACO,OAAP,CAAeE;AAF3B;AAKA,mCAAYV,KAAZ;AAAmBN,YAAAA,SAAS,EAAEe;AAA9B;AACD,SAZuC,CAcxC;;;AACA,eAAOT,KAAP;AACD;;AACD;AACE,aAAOA,KAAP;AApDJ;AAsDD,CAvDD;;AAyDA,eAAeD,WAAf","sourcesContent":["import * as CONSTANTS from \"./Constants\";\n\n// If multiple components need access to some data, in that case we store such data in redux.\nconst initialState = {\n  cartItems: [],\n  showCartDialog: false,\n  showMenu: true,\n  checkedOutItems: [],\n  loggedInUser: null\n};\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case CONSTANTS.ADD_ITEM_IN_CART: {\n      let index = state.cartItems.findIndex(x => x.id === action.payload.id);\n\n      // Is the item user wants to add already in the cart?\n      if (index !== -1) {\n        // Yes, update the quantity.\n        let cloneCartItems = [...state.cartItems];\n        cloneCartItems[index] = {\n          ...cloneCartItems[index],\n          quantity: state.cartItems[index].quantity + action.payload.quantity\n        };\n\n        return { ...state, cartItems: cloneCartItems };\n      }\n\n      // No, add a new item.\n      return { ...state, cartItems: state.cartItems.concat(action.payload) };\n    }\n    case CONSTANTS.SHOW_CART_DLG:\n      return { ...state, showCartDialog: action.payload };\n    case CONSTANTS.DELETE_CART_ITEM:\n      return {\n        ...state,\n        cartItems: state.cartItems.filter(x => x.id !== action.payload)\n      };\n    case CONSTANTS.TOGGLE_MENU:\n      return { ...state, showMenu: !state.showMenu };\n    case CONSTANTS.SET_LOGGED_IN_USER:\n      return { ...state, loggedInUser: action.payload };\n    case CONSTANTS.LOGOUT:\n      return { ...state, loggedInUser: null, checkedOutItems: [] };\n    case CONSTANTS.SET_CHECKEDOUT_ITEMS:\n      return { ...state, checkedOutItems: action.payload };\n    case CONSTANTS.UPDATE_CART_ITEM_QUANTITY: {\n      let index = state.cartItems.findIndex(x => x.id === action.payload.id);\n\n      // User wants to update quantity of existing item.\n      if (index !== -1) {\n        let cloneCartItems = [...state.cartItems];\n        cloneCartItems[index] = {\n          ...cloneCartItems[index],\n          quantity: action.payload.quantity\n        };\n\n        return { ...state, cartItems: cloneCartItems };\n      }\n\n      // If we couldn't find such item, do nothing.\n      return state;\n    }\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;\n"]},"metadata":{},"sourceType":"module"}