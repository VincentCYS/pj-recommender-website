{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf3 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _TouchableRipple = _interopRequireDefault(require(\"../TouchableRipple\"));\n\nvar _MaterialCommunityIcon = _interopRequireDefault(require(\"../MaterialCommunityIcon\"));\n\nvar _Text = _interopRequireDefault(require(\"../Typography/Text\"));\n\nvar _theming = require(\"../../core/theming\");\n\nvar _ListAccordionGroup = require(\"./ListAccordionGroup\");\n\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/List/ListAccordion.tsx\";\n\nvar ListAccordion = function (_React$Component) {\n  (0, _inherits2.default)(ListAccordion, _React$Component);\n\n  function ListAccordion() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    (0, _classCallCheck2.default)(this, ListAccordion);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(ListAccordion)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"state\", {\n      expanded: _this.props.expanded || false\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handlePress\", function () {\n      _this.props.onPress && _this.props.onPress();\n\n      if (_this.props.expanded === undefined) {\n        _this.setState(function (state) {\n          return {\n            expanded: !state.expanded\n          };\n        });\n      }\n    });\n    return _this;\n  }\n\n  (0, _createClass2.default)(ListAccordion, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          left = _this$props.left,\n          title = _this$props.title,\n          description = _this$props.description,\n          children = _this$props.children,\n          theme = _this$props.theme,\n          titleStyle = _this$props.titleStyle,\n          descriptionStyle = _this$props.descriptionStyle,\n          titleNumberOfLines = _this$props.titleNumberOfLines,\n          descriptionNumberOfLines = _this$props.descriptionNumberOfLines,\n          style = _this$props.style,\n          id = _this$props.id,\n          testID = _this$props.testID;\n      var titleColor = (0, _color.default)(theme.colors.text).alpha(0.87).rgb().string();\n      var descriptionColor = (0, _color.default)(theme.colors.text).alpha(0.54).rgb().string();\n      var expandedInternal = this.props.expanded !== undefined ? this.props.expanded : this.state.expanded;\n      return React.createElement(_ListAccordionGroup.ListAccordionGroupContext.Consumer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        }\n      }, function (groupContext) {\n        if (groupContext !== null && !id) {\n          throw new Error('List.Accordion is used inside a List.AccordionGroup without specifying an id prop.');\n        }\n\n        var expanded = groupContext ? groupContext.expandedId === id : expandedInternal;\n        var handlePress = groupContext && id !== undefined ? function () {\n          return groupContext.onAccordionPress(id);\n        } : _this2.handlePress;\n        return React.createElement(_reactNative.View, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 210\n          }\n        }, React.createElement(_TouchableRipple.default, {\n          style: [styles.container, style],\n          onPress: handlePress,\n          accessibilityTraits: \"button\",\n          accessibilityComponentType: \"button\",\n          accessibilityRole: \"button\",\n          testID: testID,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 211\n          }\n        }, React.createElement(_reactNative.View, {\n          style: styles.row,\n          pointerEvents: \"none\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 219\n          }\n        }, left ? left({\n          color: expanded ? theme.colors.primary : descriptionColor\n        }) : null, React.createElement(_reactNative.View, {\n          style: [styles.item, styles.content],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 227\n          }\n        }, React.createElement(_Text.default, {\n          numberOfLines: titleNumberOfLines,\n          style: [styles.title, {\n            color: expanded ? theme.colors.primary : titleColor\n          }, titleStyle],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 228\n          }\n        }, title), description && React.createElement(_Text.default, {\n          numberOfLines: descriptionNumberOfLines,\n          style: [styles.description, {\n            color: descriptionColor\n          }, descriptionStyle],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 241\n          }\n        }, description)), React.createElement(_reactNative.View, {\n          style: [styles.item, description ? styles.multiline : undefined],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 255\n          }\n        }, React.createElement(_MaterialCommunityIcon.default, {\n          name: expanded ? 'chevron-up' : 'chevron-down',\n          color: titleColor,\n          size: 24,\n          direction: _reactNative.I18nManager.isRTL ? 'rtl' : 'ltr',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 261\n          }\n        })))), expanded ? React.Children.map(children, function (child) {\n          if (left && React.isValidElement(child) && !child.props.left && !child.props.right) {\n            return React.cloneElement(child, {\n              style: [styles.child, child.props.style]\n            });\n          }\n\n          return child;\n        }) : null);\n      });\n    }\n  }]);\n  return ListAccordion;\n}(React.Component);\n\n(0, _defineProperty2.default)(ListAccordion, \"displayName\", 'List.Accordion');\n(0, _defineProperty2.default)(ListAccordion, \"defaultProps\", {\n  titleNumberOfLines: 1,\n  descriptionNumberOfLines: 2\n});\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    padding: 8\n  },\n  row: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  multiline: {\n    height: 40,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  title: {\n    fontSize: 16\n  },\n  description: {\n    fontSize: 14\n  },\n  item: {\n    margin: 8\n  },\n  child: {\n    paddingLeft: 64\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center'\n  }\n});\n\nvar _default = (0, _theming.withTheme)(ListAccordion);\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}