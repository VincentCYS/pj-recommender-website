{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf3 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _ActivityIndicator = _interopRequireDefault(require(\"../ActivityIndicator\"));\n\nvar _FABGroup2 = _interopRequireDefault(require(\"./FABGroup\"));\n\nvar _Surface = _interopRequireDefault(require(\"../Surface\"));\n\nvar _CrossFadeIcon = _interopRequireDefault(require(\"../CrossFadeIcon\"));\n\nvar _Text = _interopRequireDefault(require(\"../Typography/Text\"));\n\nvar _TouchableRipple = _interopRequireDefault(require(\"../TouchableRipple\"));\n\nvar _colors = require(\"../../styles/colors\");\n\nvar _theming = require(\"../../core/theming\");\n\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/FAB/FAB.tsx\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2.default)(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar FAB = function (_React$Component) {\n  (0, _inherits2.default)(FAB, _React$Component);\n\n  function FAB() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    (0, _classCallCheck2.default)(this, FAB);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(FAB)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"state\", {\n      visibility: new _reactNative.Animated.Value(_this.props.visible ? 1 : 0)\n    });\n    return _this;\n  }\n\n  (0, _createClass2.default)(FAB, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var scale = this.props.theme.animation.scale;\n\n      if (this.props.visible === prevProps.visible) {\n        return;\n      }\n\n      if (this.props.visible) {\n        _reactNative.Animated.timing(this.state.visibility, {\n          toValue: 1,\n          duration: 200 * scale,\n          useNativeDriver: true\n        }).start();\n      } else {\n        _reactNative.Animated.timing(this.state.visibility, {\n          toValue: 0,\n          duration: 150 * scale,\n          useNativeDriver: true\n        }).start();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          small = _this$props.small,\n          icon = _this$props.icon,\n          label = _this$props.label,\n          _this$props$accessibi = _this$props.accessibilityLabel,\n          accessibilityLabel = _this$props$accessibi === void 0 ? label : _this$props$accessibi,\n          customColor = _this$props.color,\n          disabled = _this$props.disabled,\n          onPress = _this$props.onPress,\n          theme = _this$props.theme,\n          style = _this$props.style,\n          visible = _this$props.visible,\n          loading = _this$props.loading,\n          testID = _this$props.testID,\n          rest = (0, _objectWithoutProperties2.default)(_this$props, [\"small\", \"icon\", \"label\", \"accessibilityLabel\", \"color\", \"disabled\", \"onPress\", \"theme\", \"style\", \"visible\", \"loading\", \"testID\"]);\n      var visibility = this.state.visibility;\n      var disabledColor = (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.12).rgb().string();\n\n      var _ref = _reactNative.StyleSheet.flatten(style) || {},\n          _ref$backgroundColor = _ref.backgroundColor,\n          backgroundColor = _ref$backgroundColor === void 0 ? disabled ? disabledColor : theme.colors.accent : _ref$backgroundColor;\n\n      var foregroundColor;\n\n      if (typeof customColor !== 'undefined') {\n        foregroundColor = customColor;\n      } else if (disabled) {\n        foregroundColor = (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.32).rgb().string();\n      } else {\n        foregroundColor = !(0, _color.default)(backgroundColor).isLight() ? _colors.white : 'rgba(0, 0, 0, .54)';\n      }\n\n      var rippleColor = (0, _color.default)(foregroundColor).alpha(0.32).rgb().string();\n      return React.createElement(_Surface.default, (0, _extends2.default)({}, rest, {\n        style: [{\n          backgroundColor: backgroundColor,\n          opacity: visibility,\n          transform: [{\n            scale: visibility\n          }]\n        }, styles.container, disabled && styles.disabled, style],\n        pointerEvents: visible ? 'auto' : 'none',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        }\n      }), React.createElement(_TouchableRipple.default, {\n        borderless: true,\n        onPress: onPress,\n        rippleColor: rippleColor,\n        disabled: disabled,\n        accessibilityLabel: accessibilityLabel,\n        accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n        accessibilityComponentType: \"button\",\n        accessibilityRole: \"button\",\n        accessibilityStates: disabled ? ['disabled'] : [],\n        style: styles.touchable,\n        testID: testID,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        }\n      }, React.createElement(_reactNative.View, {\n        style: [styles.content, label ? styles.extended : small ? styles.small : styles.standard],\n        pointerEvents: \"none\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        }\n      }, icon && loading !== true ? React.createElement(_CrossFadeIcon.default, {\n        source: icon,\n        size: 24,\n        color: foregroundColor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        }\n      }) : null, loading ? React.createElement(_ActivityIndicator.default, {\n        size: 18,\n        color: foregroundColor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        }\n      }) : null, label ? React.createElement(_Text.default, {\n        style: [styles.label, _objectSpread({\n          color: foregroundColor\n        }, theme.fonts.medium)],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        }\n      }, label.toUpperCase()) : null)));\n    }\n  }]);\n  return FAB;\n}(React.Component);\n\n(0, _defineProperty2.default)(FAB, \"Group\", _FABGroup2.default);\n(0, _defineProperty2.default)(FAB, \"defaultProps\", {\n  visible: true\n});\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    borderRadius: 28,\n    elevation: 6\n  },\n  touchable: {\n    borderRadius: 28\n  },\n  standard: {\n    height: 56,\n    width: 56\n  },\n  small: {\n    height: 40,\n    width: 40\n  },\n  extended: {\n    height: 48,\n    paddingHorizontal: 16\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  label: {\n    marginHorizontal: 8\n  },\n  disabled: {\n    elevation: 0\n  }\n});\n\nvar _default = (0, _theming.withTheme)(FAB);\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}