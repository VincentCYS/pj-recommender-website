{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RadioButtonAndroid = exports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf3 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _RadioButtonGroup = require(\"./RadioButtonGroup\");\n\nvar _utils = require(\"./utils\");\n\nvar _TouchableRipple = _interopRequireDefault(require(\"../TouchableRipple\"));\n\nvar _theming = require(\"../../core/theming\");\n\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/RadioButton/RadioButtonAndroid.tsx\";\nvar BORDER_WIDTH = 2;\n\nvar RadioButtonAndroid = function (_React$Component) {\n  (0, _inherits2.default)(RadioButtonAndroid, _React$Component);\n\n  function RadioButtonAndroid() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    (0, _classCallCheck2.default)(this, RadioButtonAndroid);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(RadioButtonAndroid)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"state\", {\n      borderAnim: new _reactNative.Animated.Value(BORDER_WIDTH),\n      radioAnim: new _reactNative.Animated.Value(1)\n    });\n    return _this;\n  }\n\n  (0, _createClass2.default)(RadioButtonAndroid, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.status === this.props.status) {\n        return;\n      }\n\n      var scale = this.props.theme.animation.scale;\n\n      if (this.props.status === 'checked') {\n        this.state.radioAnim.setValue(1.2);\n\n        _reactNative.Animated.timing(this.state.radioAnim, {\n          toValue: 1,\n          duration: 150 * scale,\n          useNativeDriver: false\n        }).start();\n      } else {\n        this.state.borderAnim.setValue(10);\n\n        _reactNative.Animated.timing(this.state.borderAnim, {\n          toValue: BORDER_WIDTH,\n          duration: 150 * scale,\n          useNativeDriver: false\n        }).start();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          disabled = _this$props.disabled,\n          onPress = _this$props.onPress,\n          theme = _this$props.theme,\n          value = _this$props.value,\n          status = _this$props.status,\n          rest = (0, _objectWithoutProperties2.default)(_this$props, [\"disabled\", \"onPress\", \"theme\", \"value\", \"status\"]);\n      var checkedColor = this.props.color || theme.colors.accent;\n      var uncheckedColor = this.props.uncheckedColor || (0, _color.default)(theme.colors.text).alpha(theme.dark ? 0.7 : 0.54).rgb().string();\n      var rippleColor, radioColor;\n      return React.createElement(_RadioButtonGroup.RadioButtonContext.Consumer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        }\n      }, function (context) {\n        var checked = (0, _utils.isChecked)({\n          contextValue: context === null || context === void 0 ? void 0 : context.value,\n          status: status,\n          value: value\n        }) === 'checked';\n\n        if (disabled) {\n          rippleColor = (0, _color.default)(theme.colors.text).alpha(0.16).rgb().string();\n          radioColor = theme.colors.disabled;\n        } else {\n          rippleColor = (0, _color.default)(checkedColor).fade(0.32).rgb().string();\n          radioColor = checked ? checkedColor : uncheckedColor;\n        }\n\n        return React.createElement(_TouchableRipple.default, (0, _extends2.default)({}, rest, {\n          borderless: true,\n          rippleColor: rippleColor,\n          onPress: disabled ? undefined : function () {\n            (0, _utils.handlePress)({\n              onPress: onPress,\n              onValueChange: context === null || context === void 0 ? void 0 : context.onValueChange,\n              value: value\n            });\n          },\n          accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n          accessibilityComponentType: checked ? 'radiobutton_checked' : 'radiobutton_unchecked',\n          accessibilityRole: \"button\",\n          accessibilityStates: disabled ? ['disabled'] : [],\n          accessibilityLiveRegion: \"polite\",\n          style: styles.container,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132\n          }\n        }), React.createElement(_reactNative.Animated.View, {\n          style: [styles.radio, {\n            borderColor: radioColor,\n            borderWidth: _this2.state.borderAnim\n          }],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156\n          }\n        }, checked ? React.createElement(_reactNative.View, {\n          style: [_reactNative.StyleSheet.absoluteFill, styles.radioContainer],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 166\n          }\n        }, React.createElement(_reactNative.Animated.View, {\n          style: [styles.dot, {\n            backgroundColor: radioColor,\n            transform: [{\n              scale: _this2.state.radioAnim\n            }]\n          }],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 169\n          }\n        })) : null));\n      });\n    }\n  }]);\n  return RadioButtonAndroid;\n}(React.Component);\n\nexports.RadioButtonAndroid = RadioButtonAndroid;\n(0, _defineProperty2.default)(RadioButtonAndroid, \"displayName\", 'RadioButton.Android');\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    borderRadius: 18\n  },\n  radioContainer: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  radio: {\n    height: 20,\n    width: 20,\n    borderRadius: 10,\n    margin: 8\n  },\n  dot: {\n    height: 10,\n    width: 10,\n    borderRadius: 5\n  }\n});\n\nvar _default = (0, _theming.withTheme)(RadioButtonAndroid);\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}