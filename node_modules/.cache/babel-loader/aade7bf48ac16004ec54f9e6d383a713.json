{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf3 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _ActivityIndicator = _interopRequireDefault(require(\"./ActivityIndicator\"));\n\nvar _Icon = _interopRequireDefault(require(\"./Icon\"));\n\nvar _Surface = _interopRequireDefault(require(\"./Surface\"));\n\nvar _Text = _interopRequireDefault(require(\"./Typography/Text\"));\n\nvar _TouchableRipple = _interopRequireDefault(require(\"./TouchableRipple\"));\n\nvar _colors = require(\"../styles/colors\");\n\nvar _theming = require(\"../core/theming\");\n\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/Button.tsx\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2.default)(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar Button = function (_React$Component) {\n  (0, _inherits2.default)(Button, _React$Component);\n\n  function Button() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    (0, _classCallCheck2.default)(this, Button);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Button)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"state\", {\n      elevation: new _reactNative.Animated.Value(_this.props.mode === 'contained' ? 2 : 0)\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handlePressIn\", function () {\n      if (_this.props.mode === 'contained') {\n        var scale = _this.props.theme.animation.scale;\n\n        _reactNative.Animated.timing(_this.state.elevation, {\n          toValue: 8,\n          duration: 200 * scale,\n          useNativeDriver: false\n        }).start();\n      }\n    });\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), \"handlePressOut\", function () {\n      if (_this.props.mode === 'contained') {\n        var scale = _this.props.theme.animation.scale;\n\n        _reactNative.Animated.timing(_this.state.elevation, {\n          toValue: 2,\n          duration: 150 * scale,\n          useNativeDriver: false\n        }).start();\n      }\n    });\n    return _this;\n  }\n\n  (0, _createClass2.default)(Button, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          disabled = _this$props.disabled,\n          compact = _this$props.compact,\n          mode = _this$props.mode,\n          dark = _this$props.dark,\n          loading = _this$props.loading,\n          icon = _this$props.icon,\n          buttonColor = _this$props.color,\n          children = _this$props.children,\n          uppercase = _this$props.uppercase,\n          accessibilityLabel = _this$props.accessibilityLabel,\n          onPress = _this$props.onPress,\n          style = _this$props.style,\n          theme = _this$props.theme,\n          contentStyle = _this$props.contentStyle,\n          labelStyle = _this$props.labelStyle,\n          testID = _this$props.testID,\n          rest = (0, _objectWithoutProperties2.default)(_this$props, [\"disabled\", \"compact\", \"mode\", \"dark\", \"loading\", \"icon\", \"color\", \"children\", \"uppercase\", \"accessibilityLabel\", \"onPress\", \"style\", \"theme\", \"contentStyle\", \"labelStyle\", \"testID\"]);\n      var colors = theme.colors,\n          roundness = theme.roundness;\n      var font = theme.fonts.medium;\n      var backgroundColor, borderColor, textColor, borderWidth;\n\n      if (mode === 'contained') {\n        if (disabled) {\n          backgroundColor = (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.12).rgb().string();\n        } else if (buttonColor) {\n          backgroundColor = buttonColor;\n        } else {\n          backgroundColor = colors.primary;\n        }\n      } else {\n        backgroundColor = 'transparent';\n      }\n\n      if (mode === 'outlined') {\n        borderColor = (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.29).rgb().string();\n        borderWidth = _reactNative.StyleSheet.hairlineWidth;\n      } else {\n        borderColor = 'transparent';\n        borderWidth = 0;\n      }\n\n      if (disabled) {\n        textColor = (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.32).rgb().string();\n      } else if (mode === 'contained') {\n        var isDark;\n\n        if (typeof dark === 'boolean') {\n          isDark = dark;\n        } else {\n          isDark = backgroundColor === 'transparent' ? false : !(0, _color.default)(backgroundColor).isLight();\n        }\n\n        textColor = isDark ? _colors.white : _colors.black;\n      } else if (buttonColor) {\n        textColor = buttonColor;\n      } else {\n        textColor = colors.primary;\n      }\n\n      var rippleColor = (0, _color.default)(textColor).alpha(0.32).rgb().string();\n      var buttonStyle = {\n        backgroundColor: backgroundColor,\n        borderColor: borderColor,\n        borderWidth: borderWidth,\n        borderRadius: roundness\n      };\n      var touchableStyle = {\n        borderRadius: style ? _reactNative.StyleSheet.flatten(style).borderRadius || roundness : roundness\n      };\n\n      var _ref = _reactNative.StyleSheet.flatten(labelStyle) || {},\n          customLabelColor = _ref.color,\n          customLabelSize = _ref.fontSize;\n\n      var textStyle = _objectSpread({\n        color: textColor\n      }, font);\n\n      var elevation = disabled || mode !== 'contained' ? 0 : this.state.elevation;\n      return React.createElement(_Surface.default, (0, _extends2.default)({}, rest, {\n        style: [styles.button, compact && styles.compact, {\n          elevation: elevation\n        }, buttonStyle, style],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257\n        }\n      }), React.createElement(_TouchableRipple.default, {\n        borderless: true,\n        delayPressIn: 0,\n        onPress: onPress,\n        onPressIn: this.handlePressIn,\n        onPressOut: this.handlePressOut,\n        accessibilityLabel: accessibilityLabel,\n        accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n        accessibilityComponentType: \"button\",\n        accessibilityRole: \"button\",\n        accessibilityStates: disabled ? ['disabled'] : [],\n        disabled: disabled,\n        rippleColor: rippleColor,\n        style: touchableStyle,\n        testID: testID,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267\n        }\n      }, React.createElement(_reactNative.View, {\n        style: [styles.content, contentStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283\n        }\n      }, icon && loading !== true ? React.createElement(_reactNative.View, {\n        style: styles.icon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285\n        }\n      }, React.createElement(_Icon.default, {\n        source: icon,\n        size: customLabelSize || 16,\n        color: customLabelColor || textColor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286\n        }\n      })) : null, loading ? React.createElement(_ActivityIndicator.default, {\n        size: customLabelSize || 16,\n        color: customLabelColor || textColor,\n        style: styles.icon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294\n        }\n      }) : null, React.createElement(_Text.default, {\n        numberOfLines: 1,\n        style: [styles.label, compact && styles.compactLabel, uppercase && styles.uppercaseLabel, textStyle, font, labelStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300\n        }\n      }, children))));\n    }\n  }]);\n  return Button;\n}(React.Component);\n\n(0, _defineProperty2.default)(Button, \"defaultProps\", {\n  mode: 'text',\n  uppercase: true\n});\n\nvar styles = _reactNative.StyleSheet.create({\n  button: {\n    minWidth: 64,\n    borderStyle: 'solid'\n  },\n  compact: {\n    minWidth: 'auto'\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  icon: {\n    marginLeft: 12,\n    marginRight: -4\n  },\n  label: {\n    textAlign: 'center',\n    letterSpacing: 1,\n    marginVertical: 9,\n    marginHorizontal: 16\n  },\n  compactLabel: {\n    marginHorizontal: 8\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase'\n  }\n});\n\nvar _default = (0, _theming.withTheme)(Button);\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}